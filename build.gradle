plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'net.serenity-bdd.serenity-gradle-plugin' version '4.0.1'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'io.qameta.allure' version '2.11.2'
}

// ✅ REPOSITORIOS MODERNIZADOS - Eliminando JCenter deprecado
repositories {
    mavenCentral()
    gradlePluginPortal()
    // Repositorio específico para algunas dependencias de Serenity si es necesario
    maven { url "https://repo1.maven.org/maven2" }
}

// ✅ VERSIONES CENTRALIZADAS Y ACTUALIZADAS
ext {
    serenityVersion = '4.0.1'           // ⬆️ Actualizado desde 2.0.71
    cucumberVersion = '7.15.0'          // ⬆️ Actualizado y unificado
    appiumVersion = '8.6.0'             // ⬆️ Actualizado desde 7.5.1
    seleniumVersion = '4.15.0'          // ⬆️ Versión moderna
    junitVersion = '5.10.1'             // ⬆️ Migrado de JUnit 4 a 5
    log4jVersion = '2.21.1'             // ⬆️ Actualizado desde 1.2.17 (vulnerabilidades)
    slf4jVersion = '2.0.9'              // ⬆️ Actualizado
    poiVersion = '5.2.5'                // ⬆️ Unificado (eliminando duplicados)
    assertJVersion = '3.24.2'           // ⬆️ Actualizado
    jacksonVersion = '2.16.1'           // ➕ Para manejo JSON moderno
}

// ✅ CONFIGURACIÓN JAVA
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

// ✅ CONFIGURACIÓN DE COMPILACIÓN
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll(['-Xlint:unchecked', '-Xlint:deprecation'])
}

// ✅ CONFIGURACIÓN DE GOOGLE JAVA FORMAT
googleJavaFormat {
    toolVersion = '1.18.1'
    include '**/*.java'
}

// ✅ CONFIGURACIÓN ALLURE REPORTS
allure {
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            cucumber7jvm {
                adapterVersion.set('2.24.0')
            }
            junit5 {
                adapterVersion.set('2.24.0')
            }
        }
    }
}

// ✅ DEPENDENCIAS MODERNIZADAS Y ORGANIZADAS
dependencies {
    // === TESTING FRAMEWORKS ===
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${junitVersion}" // Para compatibilidad temporal
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    
    // === SERENITY BDD ===
    implementation "net.serenity-bdd:serenity-core:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-junit5:${serenityVersion}"        // ⬆️ Nuevo para JUnit 5
    implementation "net.serenity-bdd:serenity-screenplay:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-ensure:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-rest-assured:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-screenplay-rest:${serenityVersion}"
    
    // === CUCUMBER (APIs ACTUALIZADAS) ===
    implementation "io.cucumber:cucumber-java:${cucumberVersion}"               // ⬆️ Migrado de cucumber.api
    implementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
    implementation "net.serenity-bdd:serenity-cucumber:${serenityVersion}"     // ⬆️ Actualizado
    
    // === SELENIUM & WEBDRIVER ===
    implementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    implementation "io.github.bonigarcia:webdrivermanager:5.6.2"              // ⬆️ Actualizado
    
    // === APPIUM ===
    implementation "io.appium:java-client:${appiumVersion}"                    // ⬆️ Actualizado
    
    // === LOGGING (MIGRADO DE LOG4J 1.x) ===
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}" // Bridge SLF4J -> Log4j2
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    
    // === APACHE POI (UNIFICADO) ===
    implementation "org.apache.poi:poi-ooxml:${poiVersion}"                    // ⬆️ Unificado, eliminando duplicados
    implementation "org.apache.poi:poi-scratchpad:${poiVersion}"               // Para documentos legacy
    
    // === JSON & DATA PROCESSING ===
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "org.json:json:20231013"                                   // ⬆️ Actualizado
    
    // === ALLURE REPORTING ===
    testImplementation "io.qameta.allure:allure-cucumber7-jvm:2.24.0"
    testImplementation "io.qameta.allure:allure-junit5:2.24.0"
    testImplementation "io.qameta.allure:allure-selenide:2.24.0"
    
    // === UTILIDADES ADICIONALES ===
    implementation "org.projectlombok:lombok:1.18.30"                         // ➕ Para reducir boilerplate
    annotationProcessor "org.projectlombok:lombok:1.18.30"
    
    // === EXCLUSIONES PARA EVITAR CONFLICTOS ===
    configurations.all {
        exclude group: 'log4j', module: 'log4j'                              // ⬆️ Eliminar Log4j 1.x vulnerable
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'                 // ⬆️ Conflicto con Log4j2
    }
}

// ✅ CONFIGURACIÓN DE TASKS DE TESTING
test {
    useJUnitPlatform()                                                        // ⬆️ Para JUnit 5
    systemProperties = System.properties
    systemProperty "cucumber.junit-platform.naming-strategy", "long"
    
    // Configuración de memoria y paralelización
    maxHeapSize = "2g"
    jvmArgs = ['-XX:+UseG1GC', '-XX:MaxGCPauseMillis=200']
    
    // Paralelización inteligente
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(), 4)
    forkEvery = 100 // Reiniciar JVM cada 100 tests para evitar memory leaks
    
    // Configuración dinámica de aplicación
    doFirst {
        def appType = System.getProperty("appType", "superapp")
        
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            exec {
                commandLine "cmd", "/c", "setAppTypeConfig.bat", appType
            }
        } else {
            exec {
                commandLine "sh", "setAppTypeConfig.sh", appType
            }
        }
    }
    
    // Configuración de reportes
    reports {
        junitXml.required = true
        html.required = true
    }
    
    // Finalizar con agregación de reportes
    finalizedBy(aggregate)
    
    // Configuración de fallos
    ignoreFailures = false
    failFast = false
}

// ✅ TASKS ESPECÍFICOS POR AMBIENTE Y APLICACIÓN
task testSuperApp(type: Test) {
    group = 'verification'
    description = 'Ejecuta tests de Super App'
    systemProperty 'appType', 'superapp'
    systemProperty 'cucumber.filter.tags', '@SuperApp and not @Ignore'
    
    reports.html.outputLocation = file("$buildDir/reports/tests/superapp")
}

task testWhatsApp(type: Test) {
    group = 'verification'
    description = 'Ejecuta tests de WhatsApp'
    systemProperty 'appType', 'whatsapp'
    systemProperty 'cucumber.filter.tags', '@WhatsApp and not @Ignore'
    
    reports.html.outputLocation = file("$buildDir/reports/tests/whatsapp")
}

task testUSSD(type: Test) {
    group = 'verification'
    description = 'Ejecuta tests de USSD'
    systemProperty 'appType', 'ussd'
    systemProperty 'cucumber.filter.tags', '@USSD and not @Ignore'
    
    reports.html.outputLocation = file("$buildDir/reports/tests/ussd")
}

task testCMAX(type: Test) {
    group = 'verification'
    description = 'Ejecuta tests de CMAX Web'
    systemProperty 'appType', 'web'
    systemProperty 'cucumber.filter.tags', '@CMAX and not @Ignore'
    
    reports.html.outputLocation = file("$buildDir/reports/tests/cmax")
}

task testSmoke(type: Test) {
    group = 'verification'
    description = 'Ejecuta tests de smoke en todos los canales'
    systemProperty 'cucumber.filter.tags', '@Smoke and not @Ignore'
}

task testRegression(type: Test) {
    group = 'verification'
    description = 'Ejecuta suite completa de regresión'
    systemProperty 'cucumber.filter.tags', 'not @Ignore'
}

// ✅ CONFIGURACIÓN SERENITY
serenity {
    reports = ["single-page-html", "json"]
    requirementsDir = "src/test/resources/features"
    outputDirectory = file("$buildDir/reports/serenity")
}

// ✅ CONFIGURACIÓN SONARQUBE
sonarqube {
    properties {
        property "sonar.projectName", "CMAX Automatización"
        property "sonar.projectKey", "cmax-automation"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

// ✅ CONFIGURACIÓN DE JACOCO PARA COBERTURA
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/userinterfaces/**',
                '**/exceptions/**',
                '**/utils/Constants.class'
            ])
        }))
    }
}

// ✅ CONFIGURACIÓN PARA EVITAR FALLOS EN GRADLE
gradle.startParameter.continueOnFailure = false

// ✅ CONFIGURACIÓN DE WRAPPER
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.ALL
}

// ✅ TASK PERSONALIZADO PARA LIMPIAR Y VALIDAR
task validateProject {
    group = 'verification'
    description = 'Valida la configuración del proyecto'
    
    doLast {
        println "✅ Validando configuración del proyecto..."
        println "   Java Version: ${System.getProperty('java.version')}"
        println "   Gradle Version: ${gradle.gradleVersion}"
        println "   Serenity Version: ${serenityVersion}"
        println "   Cucumber Version: ${cucumberVersion}"
        println "   Appium Version: ${appiumVersion}"
        println "✅ Configuración validada correctamente"
    }
}

// ✅ HOOKS PARA EJECUCIÓN
tasks.named('test') {
    dependsOn 'validateProject'
}

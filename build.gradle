repositories {
    jcenter()
    mavenLocal()
}
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.70")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.9"

    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'com.github.sherter.google-java-format'
apply plugin: 'org.sonarqube'


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    verifyGoogleJavaFormat.dependsOn(tasks.googleJavaFormat)
}

test {
    systemProperties = System.properties
    systemProperty "cucumber.options", System.getProperty("cucumber.options")
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
    systemProperties = System.properties
    maxParallelForks = Runtime.runtime.availableProcessors()

    doFirst {
        def appType = System.getProperty("appType", "superapp") // Valor por defecto: superapp

        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            exec {
                commandLine "cmd", "/c", "setAppTypeConfig.bat", appType
            }
        } else {
            exec {
                commandLine "sh", "setAppTypeConfig.sh", appType
            }
        }
    }
}

ext {
    serenityVersion = '2.0.71'
    serenityCucumberVersion = '1.9.45'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.13.2'
    testImplementation 'org.slf4j:slf4j-api:1.7.2'
    testImplementation 'org.slf4j:slf4j-log4j12:1.7.2'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    implementation "net.serenity-bdd:serenity-core:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-junit:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-cucumber:$rootProject.ext.serenityCucumberVersion"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:$rootProject.ext.serenityVersion"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'io.appium:java-client:7.5.1'   // Dependencia de Appium Java Client
    implementation "net.serenity-bdd:serenity-ensure:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-rest-assured:$rootProject.ext.serenityVersion"
    implementation 'net.serenity-bdd:serenity-screenplay-rest:2.0.0'
    implementation 'org.apache.poi:poi-ooxml:5.0.0'
    implementation 'org.json:json:20210307'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17', {
        exclude group: 'com.sun.jmx', module: 'jmxri'
        exclude group: 'com.sun.jdmk', module: 'jmxtools'
        exclude group: 'javax.jms', module: 'jms'
        implementation 'io.github.bonigarcia:webdrivermanager:5.0.3'

    }

}

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)
